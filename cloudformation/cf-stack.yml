# TODO IN ORDER:
# Figure out how to add a staging codebuild, that runs on PR's
# Add layer caching to ECR

AWSTemplateFormatVersion: 2010-09-09

Description: "One SearchAPI Deployment per GitHub Branch."

Parameters:

  # LambdaDockerRegistry:
  #   Type: String
  #   Description: "For the whole account. In the form of: public.ecr.aws/o4c4z2t6"
  #   Default: "public.ecr.aws/o4c4z2t6"
  
  GitHubBranch:
    Type: String
    Description: "Branch to run from. This also becomes the tag for the container in ECR."
    # You need to escape the slash, so *it* can escape the period... weird.
    # (To match the actual period, and not regex's "any character")
    AllowedPattern: "[A-Za-z0-9-\\.]+"
  
  # # Not sure if this is the best place for this yet. Might need to be in the GH action:
  # CreateUatApi:
  #   Type: String
  #   AllowedValues: ["True", "False"]
  #   Description: "[True/False] Also create a lambda API pointed at CMR UAT."
  #   Default: "False"

Resources:

  S3ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        # You need the Strings macro to use this (cloudformation/cf-strings-macro.yml):
        Fn::Transform:
          Name: String
          Parameters:
            InputString: !Sub "searchapi-${GitHubBranch}-artifact-storage"
            Operation: Lower
      LifecycleConfiguration:
        Rules:
          - Id: DeleteBuildArtifactsAfterOneWeek
            ExpirationInDays: 7
            Status: Enabled

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AllowGitHubConnection
          PolicyDocument:
            Statement:
              # Allow the first pipeline stage to connect to github:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !GetAtt GitHubConnection.ConnectionArn
              # Allow the whole pipeline to store artifacts here:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${S3ArtifactBucket}/*
              # Allow the pipeline to start CodeBuild:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt BuildPushDocker.Arn

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AllowCodeBuildLogsTwo
          PolicyDocument:
            Statement:
              # Allow CodeBuild to Create Logs:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BuildPushDocker-*:log-stream:*"
              # Allow CodeBuild to Read the Artifact:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub ${S3ArtifactBucket.Arn}/*
              # Allow CodeBuild to get the DockerHub user/pass:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dockerhub-*
              # Allow Codebuild to interact with any ECR (requires ANY resource, keep Action's VERY minimal):
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - sts:GetServiceBearerToken
                Resource: "*"
              # Allow codebuild to push to our *personal* ECR:
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeImages
                  - ecr:DescribeRepositories
                  - ecr:GetDownloadUrlForLayer
                  - ecr:InitiateLayerUpload
                  - ecr:ListImages
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource: !GetAtt MainECR.Arn

  MainECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub searchapi-${GitHubBranch}



  GitHubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ProviderType: GitHub
      ConnectionName:
        # You need the Strings macro to use this (cloudformation/cf-strings-macro.yml):
        Fn::Transform:
          Name: String
          Parameters:
            InputString: !Sub "SearchAPI-${GitHubBranch}-gh-connect"
            Operation: MaxLength
            Length: 32

  # IF you change this name, also update it's policy that writes logs.
  # Hard-coded the name there to avoid a circular dependency.
  BuildPushDocker:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        # Different ComputeTypes:
        # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        # EnvironmentVariables:
        #   - Type: PLAINTEXT
        #     Name: GITHUB_BRANCH
        #     Value: !Ref GitHubBranch
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: true # We need docker as root sadly
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: cloudformation/codebuild-update-docker.yml
      TimeoutInMinutes: 20 # Default is 60
      ConcurrentBuildLimit: 1



  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub SearchAPI-${GitHubBranch}
      ArtifactStore:
        Type: S3
        Location: !Ref S3ArtifactBucket
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source-GitHub
          Actions:
            # CodeStarSourceConnection is required for 'GitHub v2' pipelines
            # https://docs.aws.amazon.com/codepipeline/latest/userguide/update-github-action-connections.html
            - Name: Pull-from-GitHub
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !GetAtt GitHubConnection.ConnectionArn
                FullRepositoryId: "asfadmin/Discovery-SearchAPI"
                BranchName: !Ref GitHubBranch
              OutputArtifacts:
                - Name: SourceCode
        - Name: Build-Push-Container
          Actions:
            - Name: Build-Push-Container
              InputArtifacts:
                - Name: SourceCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildPushDocker
                PrimarySource: SourceCode
                EnvironmentVariables: !Sub '[
                                              {"name":"DOCKER_IMAGE_URI","value":"${MainECR.RepositoryUri}","type":"PLAINTEXT"}
                                            ]'

Outputs:
  # EcrImageUri:
  #   Value: !Sub ${LambdaDockerRegistry}/searchapi-${GitHubBranch}
  #   Description: "The full uri to pull the container from."
  # Registry:
  #   Value: !Ref LambdaDockerRegistry
  Image:
    Value: !Ref GitHubBranch
  EcrArn:
    Value: !GetAtt MainECR.Arn