
AWSTemplateFormatVersion: 2010-09-09

Description: Everything needed for a single SearchAPI

Parameters:

  ContainerTag:
    Type: String
    Description: "Name of github branch the stack is hooked to. (also appends '-staging' if PR)."
    # You need to escape the slash, so *it* can escape the period... weird.
    # (To match the actual period, and not regex's "any character")
    AllowedPattern: "[A-Za-z0-9-\\.]+"

  Maturity:
    Type: String
    Description: "Passed to container. Maturity to run the API."

  ImportValueEcrUri:
    Type: String
    Description: "Exported Value, holds SearchAPI registry. (Output of that stack: {StackName}-RegistryUri)."
    Default: "ECR-SearchAPI-RegistryUri"

  NumConcurrentExecutions:
    Type: Number
    Description: "The number of lambda functions to keep warm at once."
    Default: 2

Resources:

  LambdaContainer:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "For SearchAPI stack '${AWS::StackName}'"
      PackageType: Image
      Code:
        # Can't have ECR as part of the stack. There's no image inside a fresh ECR,
        # so lambda fails to deploy and fails the stack.
        ImageUri: !Join
          - ":"
          - - Fn::ImportValue: !Sub "${ImportValueEcrUri}"
            - !Ref ContainerTag
      ImageConfig:
        EntryPoint: [ "/lambda-entrypoint.sh" ]
        Command: [ "SearchAPI.application.run_flask_lambda" ]
      Environment:
        Variables:
          MATURITY: !Ref Maturity
      MemorySize: 10240 # Max is 10240
      Timeout: 900 # Max is 900. BUT Gateway times-out at 30. Let THAT timeout first, to get 503 response.
      Role: !GetAtt LambdaServiceRole.Arn

  LambdaConcurrencyConfig:
    Type: AWS::Lambda::Version
    Properties:
      Description: !Sub "Lambda concurrency config for stack '${AWS::StackName}'."
      FunctionName: !Ref LambdaContainer
      ProvisionedConcurrencyConfig:
         ProvisionedConcurrentExecutions: !Ref NumConcurrentExecutions

  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # Create Logs
        - PolicyName: CreateAndUpdateLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*"
        # Update Cloudwatch
        - PolicyName: UpdateCloudwatch
          PolicyDocument:
            Statement:
              # cloudwatch:PutMetricData requires ALL resources. Keep this minimal:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-ApiGatewayV2"
      Description: !Sub "For SearchAPI stack '${AWS::StackName}'"
      ProtocolType: HTTP
      Target: !GetAtt LambdaContainer.Arn
      CredentialsArn: !GetAtt ApiGatewayServiceRole.Arn
      # CorsConfiguration:
      #    CorsBlockHere

  # Use this instead of "AWS::ApiGatewayV2::Stage", because you can't create "$default": already exists.
  # Causes an "internal failure" when deploying the stack. Come back to this so we get API logs
  ApiGatewayStageOverride:
    Type: AWS::ApiGatewayV2::ApiGatewayManagedOverrides
    Properties:
      ApiId: !Ref ApiGateway
      Stage:
        AccessLogSettings:
          DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
          Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "httpMethod":"$context.httpMethod", "path": "$context.path", "routeKey":"$context.routeKey", "statusCode":"$context.status","protocol":"$context.protocol", "requestTime":"$context.requestTime", "responseLength":"$context.responseLength" }'

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-${ApiGateway}
      RetentionInDays: 7

  ApiGatewayServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt LambdaContainer.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/${AWS::StackName}-*

Outputs:
  LambdaFunction:
    Value: !Ref LambdaContainer
  ApiUrl:
    # Everything goes to the default route, so no '/something' is needed at the end:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/"
