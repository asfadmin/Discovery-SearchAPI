AWSTemplateFormatVersion: 2010-09-09

Description: Everything needed for a single SearchAPI

Parameters:

  Maturity:
    Type: String
    Description: Passed to container. Maturity to run the API.
    Default: devel

  DockerUri:
    Type: String
    Description: The registry + tag that holds the API Docker image.

Resources:

  LambdaContainer:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "For SearchAPI stack '${AWS::StackName}'"
      PackageType: Image
      Code:
        ImageUri: !Ref DockerUri
      ImageConfig:
        EntryPoint: [ "/lambda-entrypoint.sh" ]
        Command: [ "main.lambda_handler" ]
      Environment:
        Variables:
          MATURITY: !Ref Maturity
      MemorySize: 10240 # Max is 10240
      Timeout: 900 # Max is 900. BUT Gateway times-out at 30. Let THAT timeout first, to get 503 response.
      Role: !GetAtt LambdaServiceRole.Arn


  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # Create Logs
        - PolicyName: CreateAndUpdateLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*"
        # Update Cloudwatch
        - PolicyName: UpdateCloudwatch
          PolicyDocument:
            Statement:
              # cloudwatch:PutMetricData requires ALL resources. Keep this minimal:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

